{{What's New ?}}

This a list of fixed bugs and improvements made :

{NOTE} : This list is not a complete list of improovements. The changes made before
october 2012 were not included since the version started in this dates used almost
new code.

{{Friday 11th, October 2012}}

	- Added welcome screen (Two versions).

	- Fixed a parsing bug (The Function Dos9_ParseStream() always returned
	  NULL).

	- Added initialisation routine ( main() ).

	- Added support for testing existing files or dirs.

	- Added support for current directory.

{{Thursday 6th, December}}

	- Added support of end of line.

	- Added commutator '/n' to the command line.

	- Added support for echoing.

	- Sorted code files for a better understandability.

{{Friday 4th, Junuary, 2013}}

	- added severals commands (TYPE/MORE, CLS, COLOR, TITLE, GOTO).

	- added support for english and french.

{{Thursday 11th, February}}

	- added api function for file matching (i.e. paths using '*' and '?').

	- added function for cross-platform console management.

	- added function to extended strings.	

{{Wednesday 20th, February}}

	- fixed many portabiility issues for api.

	- api is now cross-platform.

	- Dos9 now works pretty well on linux.

	- added lot of support for linux.

	- fixed a bug with vars under linux.

	- thought about use of dynamic files to easily change language.

	- Dos9 runs 'Dos9_Auto.bat' at launch, that initializes Variables to be 
	  Cross-platform.

	- Dos9 has now 3 native variables :

		-- %DOS9_OS% : The operating system that is currently running
		  Dos9.

		-- %DOS9_VERSION% : The version of the running Dos9.
		
		-- %DOS9_PATH% : The path of Dos9 interpreter.
		
{{Monday 11th, March}}

	- Solve many portability issues (i.e some programs did not work under
	  Linux).

	- Reprogrammed whole Man utility, which has been named "dman" to avoid
	  confusion on POSIX-compatible Systems.

		-- DMan is able to run on several platforms natively.

		-- DMan is more simple to use, since it makes it possible to
		  use links man pages.

	- Fixed some bugs on BatMan.

	- BatMan is now mainly portable.

	- Fixed a bug in delayed variable expansion.

{{Thursday 11th, April}}

	- Corected support of delayed expansion that didn't match to the way
	  cmd.exe parses it.

	- Added support of expression evaluating (might migrate to GNU
	  LibMathEval soon).

	- Added new kind of page support for dMan, it uses now a zip-compressed 
	  file that contains several pages and saves up disk.

	- Added a console-side text editor (an alternative to BatMan), GNU Nano.

	- Modified nano to highlight batch code.

	- Fixed a bug in a parameter for delayed expansion
	  (cEnableDelayedExpansion was not taken account).
	
{{Thursday 12th, September}}

	- Added UTF-8 support.

	- Added different packages :
	
		-- Dos9 Project HLP : A man page viewer.
		
		-- Dos9 Project TEA : A simple, fast and tiny text processor.
		
		-- Dos9 Project DUMP : A hex-dumper.
	
	- Added i18n support (through GNU gettext).

	- Added a README file.

{{Tuesday 17th, September}}

	- Fixed bug with the message ``Error : "..." is not recognized as ...'' 
	  message in linux version.

	- Fixed bug with the wait() function in that made the program hold
	  indefinetly.

{{Thursday 16th, October}}

	- Changed build architecture. Now, the package can be built through
	a single commmand line, that build all dependencies, i.e.:
	
${Make -B}

	- Added a lock specifier to the structure STREAMLVL that enables to fix
	bugs with nested redirection levels. Like those that occured running the
	following script:

${IF 1==1 (
	ECHO This goes to file2 
	ECHO This goes to file1 > file 1
	ECHO This goes to file2, again
) > file 2}

	- Added a kind of old allocated ESTR structure reuser, that avoid reallocating
	new estr structures. (Saves up speed).
	
{{Sunday 27th, October}}

	- Some bug fixes, including a bug that appeared with ``%~A''.
	
	- Added primary support of {FOR} loops (ie. simple for loop without options).
	
{{Friday 13th, December}}

	- Solved some bugs in libDos9 (a hazardous non initialized var)
	
	- Added support {FOR /F} loops with files as input.
	
{{Thursday 2nd, Junuary 2014}}

	- Corrected {Dos9_ScriptCommand.c} bugs in which the delayed expansion was not executed
	even if it was enabled.
	
	- Corrected some manual page
	
	- added some translated pages
	
	- added new {make} system.
	
	- added expressions (both {interger} and {float} mode) for the {SET /A} command.
	
	- added {FOR /F} loop support with string as input.
	
	- added support for top-level blocks.
	
{{Thursday 14th, Junuary}}

	- added final support of {FOR /F} including the use of command outputs as {FOR}
	input.
	
	- added {DOS9_SEARCH_NO_CURRENT_DIR} which does not include the pseudo directories
	'..' and '.'.
	
	- corrected a compatibility bug with {cmd.exe}: {DIR /b} returned the pseudo directories
	'..' and '.'.
	
	- corrected an expansion bug with {%%~a} (and similar var because the interpretor missinterpreted
	the command if, for example {%%~ax} was badly expanded if {%%x} was not defined). Now, the choosed varaible
    is the largest match defined.
	
	- corrected bug with simple {FOR} processing.
	
	- added partial support of {FOR /R}. (Note: this is provided for compatibility purpose, and that new scripts
	should not use theses switches anymore.)
	
	- added version information as a header file, making version management easier.
	
	- added a function to be executed automatically on exit.
	
	- some minor bugfixes.
	
	- some manual pages enhancement.
	
{{Wednesday 15th, Junuary}}

	- fixed a bug that prevented both {FOR /R} and {FOR /D} to be executed the right way.
	
	- fixed a bug with use of {.} in file searches.
	
{{Friday 17th, Junuary}}

	- Fixed a bug that caused some particular redirections to be misinterpreted, particularly,
	in blocks ``(echo test>NUL)'' trigered an error, because the output was interpreted to be
	a redirection to file ``NUL)''. This has been solved, and both '(' , '|' and '&' operators
	are no prioritary.
	
	- Modified version information management. Now version are numbered in the folowing way:
	{YYYY.major.minor[tag]}. Where :
	
		-- {YYYY} : Is the year the version was released.
		
		-- {major} : The major version of {Dos9}.
		
		-- {minor} : The minor version of {Dos9}.
		
		-- {tag} : An optionnal character, meaning :
		
			--- {d} : Develloper version.
			
			--- {b} : Beta version.
	
	- Fixed problem with broken make.
	
	- Enhanced features of {FILELIST*} functions of libDos9. Search is now quicker. It also resulted in
	better execution times of the {FOR /R} function (even though still deprecated).
	
{{Monday 20th, Junuary}}

	- Corrected a but that cause line like ``:: comment & command'' to execute the command
	{command}, unlike {cmd.exe}'s behaviour.
	
	- Added {REM} command and comments manual page.
	
	- Fixed broken make that did not build {DUMP} command.

	- Added endianness support to {DUMP} command.
	
	- Behaviour of {Dos9} is now the same as {cmd.exe}'s one towards block.
	
	- Fixed a bug that required both {@} and {:} signs to be at first column.
	
	- Fixed a bug that prevented redirection to be executed in a top-level block.

	- Added copyright notice to all manual pages.
	
	- Fixed a bug with an added extra space with redirection placed at end of
	input line.
	
{{Thursday 23th, Junuary}}

	- Fixed a bug with the {TITLE} command. The {TITLE} command set a title that
	was the whole command line (including {TITLE} statement).
	
	- Fixed a bug with the {FILELIST} features. It now works as expected with both
	'/' (filesystem root sign) and '[driveletter]:/' with windows.
	
{{Friday 24th, Junuary}}

	- Started working on an enhanced version of {TEA} text preprocessor.
	
{{Saturday 1st, February}}

	- Final version of {TEAv2}. Added support for both {HTML 5}, {HTML 4.01} and
	{xHTML}. Others formats have been dropped.
	
	- Fixed a bug with the parsing of command line parameter. If, the final parameter
	was enclosed in quotes (simple or double), it resulted in undefined behaviour.
	
	- Fixed a bug that prevented user from include pipes in {FOR /F} command input.
	
	- Enhanced pipe features.
	
	- Fixed a bug that caused the following message
	
	${Error : Unable to release mutex}
	
	@- to be printed at exit, due to an undefined behavior with {atexit()} function.
	
{{Friday 7th, February}}

	- Fixed a bug of {SET /P} subcommand. The bug caused a SEGFAULT to be raised on
	execution.
	
	- Fixed a major bug that prevented command search to be executed normally, it
	returned the shortest match available instead of the largest available one.
	
	- Added an error message if the {SET} command is unable to set environment variable.
	
{{Wednesday 12th, February}}

	- Fixed a bug of {SET /P} subcommand, that didn't not removed the carriage return at the
	end of the input.
	
{{Thursday 13th, February}}

	- Found a bug that occurs when using {CD} command from inside a batch script, if the path
	to the script given is relative, {Dos9} tries to open it in the new current path, and
	fail, or execute a different script depending on circumstances. This is to be fixed in next
	release (that will include a bunch of improvements, like {CALL}, I hope).
	
{{Friday 14th, February}}

	- Started working in version {2014.0.8}, a version that will include more features, (including use
	of intelligent help browsing, and improved command searching (through a own procedure, instead
	of what was used previously).
	
	- Fixed a bug with multiple lists in {TEA} html mode.
	
	- Added own function to search files in path. It is not used everywhere though.
	
{{Friday 21th, February}}

	- Added support of new threaded function, through a particular header.
	
	- The issue of uncontrolled sub-threads that continued to be executed was a major concerns, this is
	fixed thanks to the new thread functions.
	
	- Solved some errors that occured when forcing binary input. A few too hopefull assumption were
	corected, so that the interpretor will not fail if a binary file (e.g. randomly generated bytes,
	such as executables) is given as batch script, it will just printf a few (or more) errors messages
	at the prompt.
	
{{Monday 24th, February}}

	- Solve a bug that prevented correct {%ERROLEVEL%} values from being correctly used, it used to
	be ignored when using internal commands.
	
	- Decided of a change in the way to deal with variables, in order to enable more compatibility between
	{Dos9} and {CMD.exe}. The changes resides in the way var and special vars are parsed.
	
	@- On the one hand,
	to make the difference between the two kind of variables, I decided the only way to denote a special var
	(ie. like {%%A}) is to prefix it with two percent. Except for variables like {%0, %1} and so on, which can
	be accessed with a single {%} for compatibility purposes. This new conventions provides more stylished script
	and prevent ``name crashes'', (ie. unexpected behaviour caused for exemple by the following code) :
	
${ECHO %1 test%
:: since spaces in variables names are valid, the result can 
:: be unexpected depending whether ``%1'' or ``%1 test%'' are
:: expanded first.
}

	@- On the other, the only way to specify environment variables is the conventionnal way, with single ``%''. Note
	that this behaviour has also changed, undefined variables will be replaced by a void string (they'll be just stripped
	from the output).
	
	@- Finally, in some cases, using ``%a'' to specify the special variable will work either, but well, it can just happen
	on a very few cases, so that it is preferable not to use this notation.
	
	- Changed {Dos9} behaviour towards {%0, ..., %9} variables. Those which are not explicitelly specified at startup will
	be filled with an empty string, and will expand to the empty string.
	
{{Thessday 25th, February}}

	- Finalized behaviour change for variables. Singles {%} are now splited from the input at parsing, exception made for
	the special variables {%0, ..., %9} for which the use of a single percent is still valid (for compatibility purposes)
	as stated previously. This prevent users from using single '%' to denote a special var other than these specified
	previously.
	
	- Fixed a bug that made {SET /P} subfunction to return inconsistent {%ERRORLEVEL%} codes. In fact, it was
	the reverse of normal behaviour, that is :
	
		-- Returning {-1} on error.
		
		-- Returning {0} on success.
		
	- Added an example of batch powered by Dos9, a multifunction caculator using both floating point arithmetics and
	integer arithmetics.
	
{{Thursday 6th, March}}

	- Changed the behaviour of the function which decide wether the command is multiline or not. It now correctly handles
	parenthesis that are not multiline. For example, the following code used to be expected to continue on next lines :
	
${echo(some test&if 1 equ 1 echo some other test}

	@- However, this behaviour is not actually resolved, indeed, some error might occurs (in some very special case) if the
	previous is run. This is still to be fixed.
	
	- Added more compatible version of {ECHO} command. The command now tolerates various non-mainstream syntax (ie. using
	other characters than '.' to force print). The following variants are accepted :
	
${echo!
echo"
echo#
echo$
echo%
echo&
echo'
echo(
echo)
echo*
echo+
echo,
echo-
echo.
echo/
echo[
echo\
echo]
echo^
echo_
echo`}

	@- Most of these syntax are however not recommended, because they can cause obvious syntax errors, and are only
	provided for compatibility purposes.
	
	@- The characters that were given are those specified by the {ISO-C 90} standard, so that some locale may provide
	additionnal characters.
	
	- Switched to {Autoconf} build system. This allows more standard builds, with {GNU} build toolchain. I can be
	compiled through a {*NIX}-shell typing:
	
${./configure
make}

	@- The install target is not supported yet. It also does not use {Automake}, since it is hard to see the point
	of writing awfull Makefile.am in order to produce a Makefile that can be written by hand.
	
{{Friday 7th, March}}

	- Started to work on a safer block determination. This should not be to difficult to obtain.
	
	- Started to refresh a large part of the core, which i includes rewritting what were called modules, and are now
	just outdated piece of code. I hope those changes to be functionnal within a short delay. It is mainly about getting
	rid of old and ugly pieces of codes i've been writting about two years ago. Some function have also been transfered to
	libDos9, this is limited however, since Dos9 is not stable enough to get it in a whole library.
	
{{Saturday 8th, March}}
	
	- Added brand new parser, and also, brand new file reader. The new implementations are much more safe and elegant.
	Lots of repetitions in the code have be gathered into singles funciton to make it more maintainable.
	
	- Silenced `Dos9_Jump.c', but hoping to get it works within a short time.
	
	- Added new string search based that take account of escaped-characters (ie. Characters preceded by '^').

	- Lots of bugfixes, particularly with the new parser and reader.
	
	- {Dos9} is much more unstable than it was, but it is to be fixed quickly since new version are easier to maintain.
	
	- Changed behaviour of function than are used to get command-line arguments. It already did line delayed expansion,
	but is include now unescaping (ie. removing '^'). Thus some syntax have became valid, such as :
	
${echo ^!test^!}

	@- This will output {!test!}, without expanding the variable, even if {test} is defined.
	
	@- It is also important to note that, syntax with escaping and with quotes are {strictly} equivalent. As an example, take
	the following code :
	
${if foo^ bar equ "foo bar" echo YES}

    @- Using, {Dos9}, the code will output {YES}. However, {cmd.exe} will not. It as been chosen to promote the first syntax
	since it is more easy to handle and far less tricky than escaping characters with {cmd.exe}, which require an almost
	random number of '^' to escape some character. 

	- Optimised {Dos9_RunBlock()} function.
	
	