{{Programming Guidelines to Dos9}}

	This documents sums up some quite important guidelines to programmers
	that are interrested in extending Dos9. It discusses overall topic
	about internal Dos9 features.
	
	Please read this document carefully before attempting any modifications
	to the original code base.
	
{{Of Multithreading}}

	It is important to notice that this branch of Dos9 actively uses
	multithreading capabilities to run various interpretors from a
	single Dos9 process, allowing various features run faster. Such
	features include pipes, or even for loops.
	
	For this reason, use of global or static variables (unless marked as thread
	local storage, eg. declared with __thread attribute) is strongly
	discouraged.
	
	Creating a new interpretor inside the current process can easilly be
	achieved by a call to Dos9_CloneInstance():
	
${THREAD Dos9_CloneInstance(void(*proc)(void*), void* data);}

	Where *proc refers to a function to be called upon successful launch of the
	new interpretor and *data refers to a pointer to be passed as a parameter to
	*proc. Note that for the others interpretors' sake, it proper and thread-safe
	memory management is of high importance. Note that this function always succeed.
	Upon intrepretor's exit, the thread returns a value corresponding to the interpretor's
	last ERRORLEVEL status.	

	As a process may host various interpretors, it is advised to pay a particular
	attention to memory leaks as they can affect really badly other interpretors.
	
{{Creating new commands}}

	Commands are the easiest extension that can be added to Dos9. To begin with,
	a typical function implementing a command should be of the following form:
	
${int Dos9_CmdMyCommand(char* line)}

	Where *line is a pointer to the command line and the return value is the
	ERRORLEVEL status of the command. Note that you should not assume
	that *line is writable. To Get Command line arguments, One of the following
	command should be used :
	
${char* Dos9_GetNextParameter(char* line, char* recv, int size);
char* Dos9_GetNextParameterEs(char* line, ESTR* recv);
char* Dos9_GetEndOfLine(char* line, char* recv, int size);
char* Dos9_GetEndOfLineEs(char* line, ESTR* recv);}

	Where *line refers to the current position in the command line, and the
	return value refers to the next position in the command line. The *recv
	parameter should refer to a buffer of at least size chars, or to an
	ESTR structure (a dynamic sized string structure provided by Dos9).
	
	Dos9 also provides some functions to manage dynamic sized strings.
	These allow dealing with string without caring about the size of the
	underlying buffer. These strings are designed by ESTR structures,
	
${ESTR* Dos9_EsInit(void); /* alloc new ESTR structure */
void Dos9_EsFree(ESTR* str); /* free ESTR structure */
int Dos9_EsCpy(ESTR* dest, char* orig); /* copy *orig into *dest */
int Dos9_EsCat(ESTR* dest, char* orig); /* cat *orig to *dest */
int Dos9_EsCpyE(ESTR* dest, ESTR* orig); /* analogous to previous */
int Dos9_EsCatE(ESTR* dest, ESTR* orig);$
char* Dos9_EsToChar(ESTR* estr); /* return internal char buffer version of estr */
estr->str; /* return internal char buffer version of estr */}
	
	As Dos9 is multithreaded, a command shall not refer to OS current
	directory, instead, it shall use one of the following function to
	retrieve current directory. Note that it also implies that it is
	not safe to use relative paths in a command without using these
	functions to convert them to absolute path.
	
${/* Convert *full to absolute path and return char associated with *full */
char* Dos9_EsToFullPath(ESTR* full);
/* Same as Dos9_MakeFullPath() but check the path exists */ 
int  Dos9_GetFileFullPath(char* full, const char* partial, size_t size);
/* Set *full (at least size bytes long) to absolute version of *partial path */
void Dos9_MakeFullPath(char* full, const char* partial, size_t size);
/* Set *full to the absolute version of *partial path */
void Dos9_MakeFullPathEs(ESTR* full, const char* partial);
/* Duplicate a path converting it to absolute. Behaviour identical to strdup(). */
char* Dos9_FullPathDup(const char* path);}

	Concerning environment variable, Dos9 uses its own internal functions that
	deal with internally stored environment. Dos9 does not rely on functions
	provided by the OS that runs it, as there is too many differences in
	the implementations.
	
${ENVBUF* lpEnv; /* a pointer to the interpretor environment */
char* Dos9_GetEnv(ENVBUF* pEnv, const char* name); /* retrieve a var */
void  Dos9_SetEnv(ENVBUF* pEnv, const char* name, const char* content) /* set a var */;
void  Dos9_UnSetEnv(ENVBUF* pEnv, const char* name); /* unset a var */}

	To add a new internal command to the interpretor, just modify the file
	Dos9_CommandInfo.h, it is quite straightforward.
	
{{Command semantics}}

	Dos9 follows some rules for the design of command-lines for the command it includes.
	There is 
	

