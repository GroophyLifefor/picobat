/*
 * Copyright (C) 1999, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2011,
 * 2012, 2013 Free Software Foundation, Inc.
 * Copyright (C) 2022 Astie Teddy and pBat developers.
 *
 * This file is part of pBat libfasteval based on libmatheval
 *
 * pBat libfasteval is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * pBat libfasteval is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pBat libfasteval.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

%{
/*
 * Copyright (C) 1999, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2011,
 * Copyright (C) 2022 Astie Teddy and pBat developers.
 * 
 * pBat libfasteval is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * pBat libfasteval is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with pBat libfasteval.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <math.h>

/* Variables used to communicate with code using parser.  */
extern _Thread_local double result;
extern _Thread_local _Bool ok;

double evaluate_function(const char *name, double arg);

/* Report parsing error.  */
int yyerror (char *s);

/* Function used to tokenize string representing function (this function
 * is generated by scanner generator).  */
extern int yylex (void);

/* Function used to reset string representing function (this function is
 * generated by scanner generator).  */
extern void input_reset (void);
%}

/* Parser semantic values type.  */
%union {
  double number;
  char *func_name;
}

/* Grammar terminal symbols.  */
%token <number> NUMBER CONSTANT VARIABLE
%token <func_name> FUNCTION
%left '|' 'o' '^'
%left '&' 'a'
%left '>' '<' 
%left '-' '+'
%left '*' '/' '%'
%left '='
%left NEG '!' '~'

/* Grammar non-terminal symbols.  */
%type <number> expression

/* Grammar start non-terminal.  */
%start input

%%

input
: expression '\n' {
  result = $1;
}
;

expression
: NUMBER
| CONSTANT
| VARIABLE
| expression '+' expression {
  $$ = $1 + $3;
}
| expression '-' expression {
  $$ = $1 - $3;
}
| expression '*' expression {
  $$ = $1 * $3;
}
| expression '/' expression {
  $$ = $1 / $3;
}
| expression '%' expression {
  $$ = fmod($1, $3);
}
| expression '&' expression {
  $$ = (unsigned int)$1 & (unsigned int)$3;
}
| expression '|' expression {
  $$ = (unsigned int)$1 | (unsigned int)$3;
}
| expression 'o' expression {
  $$ = (unsigned int)$1 || (unsigned int)$3;
}
| expression '^' expression {
  $$ = (unsigned int)$1 ^ (unsigned int)$3;
}
| expression '>' expression {
  $$ = (unsigned int)$1 >> (unsigned int)$3;
}
|  expression '<' expression {
  $$ = (unsigned int)$1 << (unsigned int)$3;
}
| '-' expression %prec NEG {
  $$ = -$2;
}
| '!' expression %prec NEG {
  $$ = $2 == 0.0;
}
| '~' expression %prec NEG {
  $$ = ~(unsigned int)$2;
}
| FUNCTION '(' expression ')' {
  $$ = evaluate_function($1, $3);
  free($1);
}
| '(' expression ')' {
  $$ = $2;
}
;

// TODO: Consider rule variable '=' expression

%%

int yyerror(char* s)
{
  /* Indicate parsing error through appropriate flag, reset input
    * string and stop parsing.  */
  ok = 0;
  input_reset();
  return 0;
}
