WHAT'S NEW ?

     This a list of fixed bugs and improvements made :

     NOTE : This list is not a complete list of improovements. The changes 
     made before october 2012 were not included since the version started in 
     this dates used almost new code.

FRIDAY 11TH, OCTOBER 2012

        - Added welcome screen (Two versions).

        - Fixed a parsing bug (The Function Dos9_ParseStream() always returned 
          NULL).

        - Added initialisation routine ( main() ).

        - Added support for testing existing files or dirs.

        - Added support for current directory.

THURSDAY 6TH, DECEMBER

        - Added support of end of line.

        - Added commutator '/n' to the command line.

        - Added support for echoing.

        - Sorted code files for a better understandability.

FRIDAY 4TH, JUNUARY, 2013

        - added severals commands (TYPE/MORE, CLS, COLOR, TITLE, GOTO).

        - added support for english and french.

THURSDAY 11TH, FEBRUARY

        - added api function for file matching (i.e. paths using '*' and '?').

        - added function for cross-platform console management.

        - added function to extended strings. 

WEDNESDAY 20TH, FEBRUARY

        - fixed many portabiility issues for api.

        - api is now cross-platform.

        - Dos9 now works pretty well on linux.

        - added lot of support for linux.

        - fixed a bug with vars under linux.

        - thought about use of dynamic files to easily change language.

        - Dos9 runs 'Dos9_Auto.bat' at launch, that initializes Variables to 
          be Cross-platform.

        - Dos9 has now 3 native variables :

             - %DOS9_OS% : The operating system that is currently running 
               Dos9.

             - %DOS9_VERSION% : The version of the running Dos9.

             - %DOS9_PATH% : The path of Dos9 interpreter.

MONDAY 11TH, MARCH

        - Solve many portability issues (i.e some programs did not work under 
          Linux).

        - Reprogrammed whole Man utility, which has been named "dman" to avoid 
          confusion on POSIX-compatible Systems.

             - DMan is able to run on several platforms natively.

             - DMan is more simple to use, since it makes it possible to use 
               links man pages.

        - Fixed some bugs on BatMan.

        - BatMan is now mainly portable.

        - Fixed a bug in delayed variable expansion.

THURSDAY 11TH, APRIL

        - Corected support of delayed expansion that didn't match to the way 
          cmd.exe parses it.

        - Added support of expression evaluating (might migrate to GNU 
          LibMathEval soon).

        - Added new kind of page support for dMan, it uses now a 
          zip-compressed file that contains several pages and saves up disk.

        - Added a console-side text editor (an alternative to BatMan), GNU 
          Nano.

        - Modified nano to highlight batch code.

        - Fixed a bug in a parameter for delayed expansion 
          (cEnableDelayedExpansion was not taken account).

THURSDAY 12TH, SEPTEMBER

        - Added UTF-8 support.

        - Added different packages :

             - Dos9 Project HLP : A man page viewer.

             - Dos9 Project TEA : A simple, fast and tiny text processor.

             - Dos9 Project DUMP : A hex-dumper.

        - Added i18n support (through GNU gettext).

        - Added a README file.

TUESDAY 17TH, SEPTEMBER

        - Fixed bug with the message ``Error : "..." is not recognized as 
          ...'' message in linux version.

        - Fixed bug with the wait() function in that made the program hold 
          indefinetly.

THURSDAY 16TH, OCTOBER

        - Changed build architecture. Now, the package can be built through a 
          single commmand line, that build all dependencies, i.e.:

             Make -B

        - Added a lock specifier to the structure STREAMLVL that enables to 
          fix bugs with nested redirection levels. Like those that occured 
          running the following script:

             IF 1==1 (
              ECHO This goes to file2 
              ECHO This goes to file1 > file 1
              ECHO This goes to file2, again
             ) > file 2

        - Added a kind of old allocated ESTR structure reuser, that avoid 
          reallocating new estr structures. (Saves up speed).

SUNDAY 27TH, OCTOBER

        - Some bug fixes, including a bug that appeared with ``%~A''.

        - Added primary support of FOR loops (ie. simple for loop without 
          options).

FRIDAY 13TH, DECEMBER

        - Solved some bugs in libDos9 (a hazardous non initialized var)

        - Added support FOR /F loops with files as input.

THURSDAY 2ND, JUNUARY 2014

        - Corrected DOS9_SCRIPTCOMMAND.C bugs in which the delayed expansion 
          was not executed even if it was enabled.

        - Corrected some manual page

        - added some translated pages

        - added new MAKE system.

        - added expressions (both INTERGER and FLOAT mode) for the SET /A 
          command.

        - added FOR /F loop support with string as input.

        - added support for top-level blocks.

THURSDAY 14TH, JUNUARY

        - added final support of FOR /F including the use of command outputs 
          as FOR input.

        - added DOS9_SEARCH_NO_CURRENT_DIR which does not include the pseudo 
          directories '..' and '.'.

        - corrected a compatibility bug with CMD.EXE: DIR /B returned the 
          pseudo directories '..' and '.'.

        - corrected an expansion bug with %%~A (and similar var because the 
          interpretor missinterpreted the command if, for example %%~AX was 
          badly expanded if %%X was not defined). Now, the choosed varaible is 
          the largest match defined.

        - corrected bug with simple FOR processing.

        - added partial support of FOR /R. (Note: this is provided for 
          compatibility purpose, and that new scripts should not use theses 
          switches anymore.)

        - added version information as a header file, making version 
          management easier.

        - added a function to be executed automatically on exit.

        - some minor bugfixes.

        - some manual pages enhancement.

WEDNESDAY 15TH, JUNUARY

        - fixed a bug that prevented both FOR /R and FOR /D to be executed the 
          right way.

        - fixed a bug with use of . in file searches.

FRIDAY 17TH, JUNUARY

        - Fixed a bug that caused some particular redirections to be 
          misinterpreted, particularly, in blocks ``(echo test>NUL)'' trigered 
          an error, because the output was interpreted to be a redirection to 
          file ``NUL)''. This has been solved, and both '(' , '|' and '&' 
          operators are no prioritary.

        - Modified version information management. Now version are numbered in 
          the folowing way: YYYY.MAJOR.MINOR[TAG]. Where :

             - YYYY : Is the year the version was released.

             - MAJOR : The major version of DOS9.

             - MINOR : The minor version of DOS9.

             - TAG : An optionnal character, meaning :

                  - D : Develloper version.

                  - B : Beta version.

        - Fixed problem with broken make.

        - Enhanced features of FILELIST* functions of libDos9. Search is now 
          quicker. It also resulted in better execution times of the FOR /R 
          function (even though still deprecated).

MONDAY 20TH, JUNUARY

        - Corrected a but that cause line like ``:: comment & command'' to 
          execute the command COMMAND, unlike CMD.EXE's behaviour.

        - Added REM command and comments manual page.

        - Fixed broken make that did not build DUMP command.

        - Added endianness support to DUMP command.

        - Behaviour of DOS9 is now the same as CMD.EXE's one towards block.

        - Fixed a bug that required both @ and : signs to be at first column.

        - Fixed a bug that prevented redirection to be executed in a top-level 
          block.

        - Added copyright notice to all manual pages.

        - Fixed a bug with an added extra space with redirection placed at end 
          of input line.

THURSDAY 23TH, JUNUARY

        - Fixed a bug with the TITLE command. The TITLE command set a title 
          that was the whole command line (including TITLE statement).

        - Fixed a bug with the FILELIST features. It now works as expected 
          with both '/' (filesystem root sign) and '[driveletter]:/' with 
          windows.

FRIDAY 24TH, JUNUARY

        - Started working on an enhanced version of TEA text preprocessor.

SATURDAY 1ST, FEBRUARY

        - Final version of TEAV2. Added support for both HTML 5, HTML 4.01 and 
          XHTML. Others formats have been dropped.

        - Fixed a bug with the parsing of command line parameter. If, the 
          final parameter was enclosed in quotes (simple or double), it 
          resulted in undefined behaviour.

        - Fixed a bug that prevented user from include pipes in FOR /F command 
          input.

        - Enhanced pipe features.

        - Fixed a bug that caused the following message

             Error : Unable to release mutex

          to be printed at exit, due to an undefined behavior with ATEXIT() 
          function.

FRIDAY 7TH, FEBRUARY

        - Fixed a bug of SET /P subcommand. The bug caused a SEGFAULT to be 
          raised on execution.

        - Fixed a major bug that prevented command search to be executed 
          normally, it returned the shortest match available instead of the 
          largest available one.

        - Added an error message if the SET command is unable to set 
          environment variable.

WEDNESDAY 12TH, FEBRUARY

        - Fixed a bug of SET /P subcommand, that didn't not removed the 
          carriage return at the end of the input.

THURSDAY 13TH, FEBRUARY

        - Found a bug that occurs when using CD command from inside a batch 
          script, if the path to the script given is relative, DOS9 tries to 
          open it in the new current path, and fail, or execute a different 
          script depending on circumstances. This is to be fixed in next 
          release (that will include a bunch of improvements, like CALL, I 
          hope).

FRIDAY 14TH, FEBRUARY

        - Started working in version 2014.0.8, a version that will include 
          more features, (including use of intelligent help browsing, and 
          improved command searching (through a own procedure, instead of what 
          was used previously).

        - Fixed a bug with multiple lists in TEA html mode.

        - Added own function to search files in path. It is not used 
          everywhere though.

FRIDAY 21TH, FEBRUARY

        - Added support of new threaded function, through a particular header.

        - The issue of uncontrolled sub-threads that continued to be executed 
          was a major concerns, this is fixed thanks to the new thread 
          functions.

        - Solved some errors that occured when forcing binary input. A few too 
          hopefull assumption were corected, so that the interpretor will not 
          fail if a binary file (e.g. randomly generated bytes, such as 
          executables) is given as batch script, it will just printf a few (or 
          more) errors messages at the prompt.

MONDAY 24TH, FEBRUARY

        - Solve a bug that prevented correct %ERROLEVEL% values from being 
          correctly used, it used to be ignored when using internal commands.

        - Decided of a change in the way to deal with variables, in order to 
          enable more compatibility between DOS9 and CMD.EXE. The changes 
          resides in the way var and special vars are parsed.

          On the one hand, to make the difference between the two kind of 
          variables, I decided the only way to denote a special var (ie. like 
          %%A) is to prefix it with two percent. Except for variables like %0, 
          %1 and so on, which can be accessed with a single % for 
          compatibility purposes. This new conventions provides more stylished 
          script and prevent ``name crashes'', (ie. unexpected behaviour 
          caused for exemple by the following code) :

             ECHO %1 test%
             :: since spaces in variables names are valid, the result can 
             :: be unexpected depending whether ``%1'' or ``%1 test%'' are
             :: expanded first.
             

          On the other, the only way to specify environment variables is the 
          conventionnal way, with single ``%''. Note that this behaviour has 
          also changed, undefined variables will be replaced by a void string 
          (they'll be just stripped from the output).

          Finally, in some cases, using ``%a'' to specify the special variable 
          will work either, but well, it can just happen on a very few cases, 
          so that it is preferable not to use this notation.

        - Changed DOS9 behaviour towards %0, ..., %9 variables. Those which 
          are not explicitelly specified at startup will be filled with an 
          empty string, and will expand to the empty string.

THESSDAY 25TH, FEBRUARY

        - Finalized behaviour change for variables. Singles % are now splited 
          from the input at parsing, exception made for the special variables 
          %0, ..., %9 for which the use of a single percent is still valid 
          (for compatibility purposes) as stated previously. This prevent 
          users from using single '%' to denote a special var other than these 
          specified previously.

        - Fixed a bug that made SET /P subfunction to return inconsistent 
          %ERRORLEVEL% codes. In fact, it was the reverse of normal behaviour, 
          that is :

             - Returning -1 on error.

             - Returning 0 on success.

        - Added an example of batch powered by Dos9, a multifunction caculator 
          using both floating point arithmetics and integer arithmetics.

THURSDAY 6TH, MARCH

        - Changed the behaviour of the function which decide wether the 
          command is multiline or not. It now correctly handles parenthesis 
          that are not multiline. For example, the following code used to be 
          expected to continue on next lines :

             echo(some test&if 1 equ 1 echo some other test

          However, this behaviour is not actually resolved, indeed, some error 
          might occurs (in some very special case) if the previous is run. 
          This is still to be fixed.

        - Added more compatible version of ECHO command. The command now 
          tolerates various non-mainstream syntax (ie. using other characters 
          than '.' to force print). The following variants are accepted :

             echo!
             echo"
             echo#
             echo$
             echo%
             echo&
             echo'
             echo(
             echo)
             echo*
             echo+
             echo,
             echo-
             echo.
             echo/
             echo[
             echo\
             echo]
             echo^
             echo_
             echo`

          Most of these syntax are however not recommended, because they can 
          cause obvious syntax errors, and are only provided for compatibility 
          purposes.

          The characters that were given are those specified by the ISO-C 90 
          standard, so that some locale may provide additionnal characters.

        - Switched to AUTOCONF build system. This allows more standard builds, 
          with GNU build toolchain. It can be compiled through a *NIX-shell 
          typing:

             ./configure
             make

          The install target is not supported yet. It also does not use 
          AUTOMAKE, since it is hard to see the point of writing awfull 
          Makefile.am in order to produce a Makefile that can be written by 
          hand.

FRIDAY 7TH, MARCH

        - Started to work on a safer block determination. This should not be 
          to difficult to obtain.

        - Started to refresh a large part of the core, which includes 
          rewritting what were called modules, and are now just outdated piece 
          of code. I hope those changes to be functionnal within a short 
          delay. It is mainly about getting rid of old and ugly pieces of 
          codes i've been writting about two years ago. Some function have 
          also been transfered to libDos9, this is limited however, since Dos9 
          is not stable enough to get it in a whole library.

SATURDAY 8TH, MARCH

        - Added brand new parser, and also, brand new file reader. The new 
          implementations are much more safe and elegant. Lots of repetitions 
          in the code have be gathered into singles funciton to make it more 
          maintainable.

        - Silenced `Dos9_Jump.c', but hoping to get it works within a short 
          time.

        - Added new string search based that take account of 
          escaped-characters (ie. Characters preceded by '^').

        - Lots of bugfixes, particularly with the new parser and reader.

        - DOS9 is much more unstable than it was, but it is to be fixed 
          quickly since new version are easier to maintain.

        - Changed behaviour of function than are used to get command-line 
          arguments. It already did line delayed expansion, but is include now 
          unescaping (ie. removing '^'). Thus some syntax have became valid, 
          such as :

             echo ^!test^!

          This will output !TEST!, without expanding the variable, even if 
          TEST is defined.

          It is also important to note that, syntax with escaping and with 
          quotes are STRICTLY equivalent. As an example, take the following 
          code :

             if foo^ bar equ "foo bar" echo YES

          Using, DOS9, the code will output YES. However, CMD.EXE will not. It 
          as been chosen to promote the first syntax since it is more easy to 
          handle and far less tricky than escaping characters with CMD.EXE, 
          which require an almost random number of '^' to escape some 
          character. 

        - Optimised DOS9_RUNBLOCK() function.

WEDNESDAY 12TH, MARCH

        - Changed behavior of the thread functions of libDos9. The THREAD 
          structure now refers to the thread ID rather than to a handle to 
          that thread. This new behaviour make it possible to work with thread 
          without left a handle on this thread opened. It also enables the 
          stack to contain THREAD structures on both *NIX and WINDOWS.

        - Added timeout to the Dos9_WaitForAllThreads function. This is 
          usefull in case of deadlocks or in case of thread that does not 
          terminate.

        - Added Dos9_AbortAllThread function, that kills all remaining thread 
          (only those that were lauched through Dos9_BeginThread)

        - Added Dos9_AbortThread function, that kills a thread.

        - fixed a bug in the thread library that sometimes causes Dos9 to wait 
          undefinetely, because function Dos9_WaitForAllThread and 
          Dos9_EndThread sometimes deadlocked, in a random basis.

        - Re-enable GOTO function, that works now (even with cross file 
          argument).

        - Added TEXT-ANSI target to the TEA text processor. It enables 
          creation of colorized output using ansi escapes code. the use of 
          this is native in *NIX and requires ansicon in WINDOWS.

        - Fixed a bug that caused infinite loop if the file read was no more 
          accessible. It now returns and just prints error message.

        - Fixed a bug causing EOF not to be detected in some circumstances.

        - Fixed a bug that caused an error to be printed in the case that a 
          script that was loaded with the GOTO command contained a CD command 
          so that the file could not be retrieved because it was kept with a 
          relative path.

THURSDAY 13TH, MARCH

        - Fixed bugs with the run functions. The use of PROGRAM || GOTO ERROR 
          to perform feature test is avaliable for both windows and *nix.

        - Fixed bugs with DOS9_SPLITPATH command in *nix.

        - Added a search in %PATH% and %PATHEXT% (only in windows) before 
          running any command.

        - Added a redirection for command that have .CMD or .BAT as extension. 
          Those files are now executed by a subprocess of DOS9 instead of 
          being loaded by CMD.EXE.

        - Fixed bug with DOS9_GETFILEPATH function. It prevented executables 
          that were in one of the %PATH% directory to be found if a folder 
          with the same name was in the same directory.

        - Fixed bug with the DOS9_FILEEXISTS function from libDos9. It 
          sometimes returned true for files that where in the path though not 
          in the current directory.

        - Fixed a bug with several encapsed blocks. The previous parser did 
          not searched for block after a block was solved (this is is now 
          corrected)

        - Improved block support by providing more routines and by making the 
          code more efficient.

        - Fixed a bug in DOS9_EXPANDVAR function that was introduced build ago 
          when rules for expansion changed. I'm affraid not to have seen it 
          before.

        - Fixed a bug with DOS9_ESCPYN function in libDos9. If the functions 
          with 0 as iSize argument, although the function is expected to 
          produce a void string, it failed in windows, thanks to microsoft's 
          crt implementation, that throws a SIGSEGV if the last parameter of 
          STRNCPY is 0.

        - Fixed a bug with FOR command. The tokenizer did not behave like it 
          is describded in the documenntation : If several delimiters were 
          encountered in a raw, they were not skipped.

        - Fixed a bug with the ECHO command. The prompt line (ie. DOS9 ...>) 
          was displayed whenever the ECHO OFF flag was set, on direct input 
          mode.

        - Fixed a bug that caused some commands to print error messages on 
          FOR commands. Most notably, the FIND command (or at least, windows's 
          implementation) fails if there is no space at end of line, so it 
          added automatically now.

        - Fixed a bug with SET /A subcommand. It prefixed variable name with a 
          space, making the result inconsistent.

        - Made the hlp to work again, without problem, since version 0.7 and 
          the deep changes made into DOS9 core to get something more modern.

SUNDAY 16TH, MARCH

        - Started building a X64 version of Dos9. I experienced troubles 
          because of the lack of X64 version of MINGW. However, I managed to 
          get a distribution of mingw-w64, the MINGW compiler adapted for 
          X64, in the TDM-gcc. The install of LIBINTL (and libiconv, on which 
          libintl depends) must be done by downloading packages from GNU 
          ports, and do some tricks to get it compiled in the x64 version. 
          This is actually difficult to build, and unstable as a did not 
          perform further tests.

        - Started profiling the DOS9 codebase, looking for making DOS9 more 
          fast. The use of GPROF has brought several interesting analysis. On 
          the one hand, I can't get explaination why is CMD.EXE faster for 
          long files, although if both are run at the same time, DOS9 perform 
          about twice as much commands by second. The things to be updated 
          are:

             - DOS9_ESINIT and DOS9_ESFREE function are far too expensive. It 
               sometimes consumes 10% of the global time-run, thus, we removed 
               parts of code from the LIBDOS9 library.

             - DOS9_GETCOMMANDPROC is far too expensive. I'm currently looking 
               for an alternative, such as hash function. I haven't found a 
               good one yet (however), and i will probably write it by myself.

             - I'm also to optimise the execution times of DOS9_STRING.H. 
               Those functions are allmost ubiquitus in the code, so that 
               large parts of code will benefit from better execution rates. 
               I'm especially targetting DOS9_SEARCHCHAR and 
               DOS9_SEARCHTOKEN, that account for a large share (about 10% 
               time execution overall).

          All those test have be made for normal script optimisation, it was 
          tested from a file that implement GOTO, IF, SET and ECHO COMMAND. I 
          also performed some tests on FOR command, as expected, functions 
          that are the most time consuming are not the same. Though, the 
          functions i listed before were also much more time consuming than 
          they need to be.

        - Improoved efficiency of DOS9_STRING.H and DOS9_ESTR.C from the 
          LIBDOS9 library. Also dissabled some piece of code that ran thread 
          in some functions, that basically made them slow down. DOS9 now 
          achieve allmost equivalent performances in FOR loops (about 100 
          lines/s less than CMD.EXE, without further optimisation), it also 
          reach got execution rates at script level (with about 3250 lines/s 
          while cmd.exe runs at 2720 lines/s on average). It is suprisingly 
          good because I did not even finished optimisation yet, so much 
          better performances can be expected.

        - Fixed a bug of IF command. The LSS comparison operator was 
          interpreted as LEQ.

THURSDAY 20TH, MARCH

        - Started comparisions between GCC optimisation levels.

        - Fixed a bug introduced in the function DOS9_SEARCHLASTTOKEN. It 
          appears that, on windows, the code runs faster using -O2 than using 
          -O3 optimisation switches, this might be caused by processor 
          caching, but however, this should not be expected to have the same 
          effect on variouss platform however. I ended up optimisation 
          operations there, since the functions used by gprof account for 
          about 70% of the execution time, so that I'm not sure it is reliable 
          now. With GPROF version, i've be able to achieve speeds of about 
          3700 L/S, so the result are expected to be at least double. In fact, 
          by experimenting, I got only about 4000 L/S, which it the speed of 
          CMD on my computer when it consumes about 80%-90% of the cpu, in 
          random occasion, because cmd.exe's has really random performances. 
          Instead, DOS9 is limited to approximately 25%.

SATURDAY 23TH, MARCH

        - Fixed a bug in DOS9_SEARCHLASTCHAR function.

        - Fixed a bug with redirection that was not right delt with. DOS9 did 
          not check wether several block are in a row on the same line.

        - Added some functionnalities to the CMD/HLP.BAT script, which is 
          meant to replace old-fashioned HLP manual page viewer. It is 
          bassically designed to act as a manual page manager rather than just 
          a viewer, by providing interfaces to build manual trees, and to get 
          manual tress from the repositories at DOS9.ORG (this is to be 
          implented later).

        - Changed names of the manual-pages subdirectories, they now match up 
          with traditional *NIX-like local names that are widely used. Note 
          that only usefull locales should be implemented (at most one for 
          every language).

TUESDAY 25TH, MARCH

        - Implemented replacement for old ENABLE/DISABLEDOS9MODE. Instead of 
          the variable, DOS9 provides the CMDLYCORRECT options that can be set 
          through SETLOCAL, and that enables more compatibility features for 
          CMD.EXE.

        - Option CMDLYCORRECT now affects FOR loops: If the option is set, 
          then all blank lines are to be stripped for the output.

        - Changed switch to specify part of lines that are not consituted of 
          switches but by text. It is now //, a bit like *NIX's --.

WEDNESDAY 26TH, MARCH

        - Added a short internal documentation to get help for internal 
          functions. These are however much tinier that the full documentation 
          given in HLP. This is voluntary, to fit in the executable.

        - First implementation of the CALL command is now working. This is 
          somewhat blured because i've not written the full man page now, but 
          it seems functionnal.

        - Fixed bug in Makefiles.

        - Fixed a file from libDos9 that still used old name CALLSTACK instead 
          of stack.

        - Found out that in some cases, TEA breaks unicode sequences by 
          intruding some line feed in the file, This remains to be fixed. This 
          was actually fixed quickly.

        - Fixed a bug that cause TEA to loop infinitely if a word turned out 
          to be to wide to fit on a single line. This is now fixed and long 
          words are now splitted in multiple lines.

        - Fixed numerous bugs introduced by use of various encoding in the 
          documentation, that is, some file were not builded by HLP because 
          iconv was not able to convert file from erroneous encoding. This has 
          been fixed and all pages builds up well with HLP.

        - Added a couple of manual pages. It is also combined with new pages 
          and translations.

WEDNESDAY 2ND, APRIL

        - Implemented aliases within Dos9

        - Added ALIAS command.

        - Improved robustness of DOS9_ADDCOMMANDDYNAMIC.

        - Fixed some bugs with CALL function that was not really functional. 
          It works much better now, but the features have not been all tested 
          yet.

        - Fixed a bug that caused %0 not to be set to the correct value by the 
          CALL command. Now, the behaviour is the following:

             - if a LABEL was given, %0 contains this label.

             - if no LABEL was given, %0 contains the file name.

TUESDAY 3RD, APRIL

        - Updated build system, so that building DOS9 can allmost be done 
          without user intervention. It's as simple as typing the following 
          line:

             make

        - Switched to version 2014.0.9, because DOS9 is becoming pretty 
          develloped now.

MONDAY 7TH, APRIL

        - Fixed numerous bugs on the GNU/LINUX version. Before that update, it 
          would have been fairly difficult to make it work. I posted only 
          fixes for GNU/Linux, but very few incompatibilities can be expected 
          for BSD based operating systems (and anyway, the only BSD based os 
          i've got is NetBSD, so that compatibility may not be achievied for 
          other versions. The major fixes included are :

             - A fix for the AUTOTOOLS build system, indeed, the old 
               CONFIGURE.AC did not appended needed libraries (for examples, 
               there was confusions for LIBINTL, that is included in GLIBC on 
               GNU/LINUX). I think i'll consider choosing a better buid 
               systems, because in facts, AUTOTOOLS adds endless complications 
               even for building quite simple code. The most Anoying drawback 
               is that in fact, you can't use AUTOCONF without using 
               AUTOMAKE, otherwise, some bugs are introduced that you'll never 
               hear of reading the documentation. Nevertheless, we don't need 
               using AUTOMAKE to generate Makefile that we could write, 
               especially when the output Makefile is about hundreds of KiB, 
               and is constituted of almost hacks to make it work with MAKE. 
               Thus, it's a bit like using a program to produce garbage. 
               AUTOCONF provides lots of interesting features, but these 
               advantages are superseeded by its drawbacks. In particular, the 
               fact that it does not meet the UNIX conception standards (e.g. 
               each program should do only do one thing, and do it the best), 
               so that the dependencies between apparently distinct AUTOTOOLS 
               programs make the developper to use all the AUTOTOOLS programs.

             - A fix for the DOS9 code itself. The last revisions of DOS9 
               included a lot of features that had not been tested on *NIX 
               operating systems. So that numerous incompatibilities were 
               introduced along source code modification. Mainly, the THREAD 
               part of LIBDOS9 had been left totally untested on real system 
               for versions. I apologize for that, I should not have been 
               waiting for such a long time to upgrade. So, fixes in the code 
               that have been made are:

                  - Make wrapper arround undefined symbols comming from 
                    windows like STRICMP (STRCASECMP is used instead). 

                  - Fixed bugs from LIBDOS9/THREADS, It caused double free 
                    exception for some errors.

                  - Fixed used of STRUPR in TEA. In fact, the symbol for 
                    STRUPR that was intended to be used on GNU/LINUX was used 
                    on WINDOWS platforms instead.

                  - Fixed incompatibilities in LIBDOS9/FILE. In fact, default 
                    routines for *NIX used the functions FOPEN to check 
                    whether a file existed or not. The bug was introduced 
                    because in many *NIX systems, directories are indeed files 
                    that can be opened. LIBDOS9 now checks for regular files 
                    using the LSTAT function instead.

                  - Fixed incompatibilities with environment variables. This 
                    issue was caused by the fact that environment variables 
                    are case-sentitive for *NIX operating systems while they 
                    are not for Windows systems. In fact, DOS9 already 
                    capitilized variable names when variables were set, 
                    however, similar feature was not provided for expansion. 
                    This is now fixed.

             - Fixes on other files, (I mean, on files that are not required 
               in order to make DOS9 runing). Those fixes include:

                  - Changed the name of the DOS9 executable from DOS9 to 
                    DOS9. This change will have no effect on windows, but it 
                    is usual, however, to have command executable names in 
                    lower characters. I may implement a feature for GNU/LINUX 
                    that ignore case for the command line. However, I now 
                    recommand using uncapitalized characters for command name, 
                    if you need compatibility, of course.

                  - Fixed a bug with the translation system. It used to scan 
                    file DOS9/LANG/DOS9_HELP.C instead of file 
                    DOS9/LANG/DOS9_LANG.C.

                  - Fixed a bug from DOS9_AUTO.BAT, the current version dit 
                    not included the path %DOS9_PATH% in the %PATH% variable, 
                    that was problematic for *NIX systems, however, the DOS9 
                    executable filename should be looked up by the program 
                    itself, rather than being included in %PATH%.

        - Changed the way libraries are built. They are now build from within 
          the current direction, and they are located in ./LIB and headers for 
          libraries are located in ./INCLUDE.

        - Fixed a bug in Makefiles that caused the manual pages to be copied 
          in a wrong directory (ie. ./BIN/SHARE/MAN instead of 
          ./BIN/SHARE/MAN/MAN that was wrong.

THURSDAY 10TH, APRIL

        - Discovered a strange bug with pipes. This bug appears when input 
          have several lines, when the pipe is closed, the input is not 
          restored (or, at least, the input is not splitted from STDIN). In 
          fact, this should not occur since when the pipe is no more 
          redirected, there is no more input left. This is strange though, as 
          this problem does not happen with single-lines input that appears to 
          work fairly good. It appears that this is caused by buffers that are 
          stored internally in the kernel of the operating systems. A solution 
          that I might consider is using regular files (instead of pipes) to 
          produce somewhat of a pipe effect, because I haven't actually found 
          a way to override the problem.

        - Fixed a bug with the DOS9_PARSEOUTPUT function. It wasn't possible 
          to specify 2>&1 and > FOO simultaneously, so, you it was not 
          possible to specify a redirection for STDIN and STDOUT with 
          TRUNCATE attribute.

MONDAY 14TH, APRIL

        - Added some corections that make the pipe function quite well on both 
          GNU/LINUX and WINDOWS architectures (I also tested on NETBSD and it 
          worked pretty well, without further tests however). 

        - Added a few fixes on languages, and I'm starting adding new messages 
          for the FILE commands.

        - Checked build on NetBSD. I've found out that DOS9 conforms with 
          POSIX.1-2001. Thus, On some platform, if you want to build if, you 
          may specoify a configuration that defines the _POSIX_C_SOURCE macro, 
          that is, type the configure line :

             ./configure CFLAGS='-D_POSIX_C_SOURCE=200112'

          However, The NetBSD headers does not conform to POSIX.1 and perform 
          wrong function exposures, so that if you use, it, you might need to 
          specify _NETBSD_SOURCE macro.

THURSDAY 17TH, APRIL

        - Added some translation message in the locale.

        - Added new manual pages and lots of fixes in the manual pages.

        - Added SHIFT command. It can be really easy to manage argument, now, 
          however, I did not preform deep test on the command so that it might 
          still be not reliable.

        - Added /F switch to ALIAS command. This allows user to redefine 
          internal commands and symbols, what was not possible previously. I 
          decided to let user override internal commands because I found it to 
          be an interesting thing to hack arround, allowing to set up 
          replacement commands for some batch that needs enhanced 
          compatibility features (although they should not need such 
          compatibility features).

        - Fixed a bug in DOS9_THREAD.C, threads functions were making casts 
          from different pointer sizes, ommiting the pointed object were 
          different. Thus, writing 8 bytes to a location which was supposed to 
          be 4 bytes long, depending on the locations of those data in the 
          executable (and hence depending on compilation), it could cause 
          really dangerous errors, such as stack corruption for example, in 
          some rare cases. This is now fixed, preventing a rare crash to 
          actually occur.

        - This is the final build for at least a few months. I'll be very busy 
          in the next few month, but I hope i'll be able to submit new fix 
          starting in the summer holidays.

SATURDAY 20TH, APRIL

        - Fixed a bug that caused DOS9 to crash if either %PATH% or %PATHEXT% 
          (only for windows) were not in the command environment.

        - Corrected a bug with TEA in HTML mode. The parser did used to escape 
          the reserved characters > and < but did not care of &. This bug is 
          corrected, enabling HTML codes to work perfectly well. I hadn't 
          noticed it until yet because most recents browsers do not care about 
          such errors, preventing error to be easilly trigered.

        - Fixed omition of ANSICON on the DOS9_AUTO.BAT, which is launched at 
          startup.

SATURDAY 14TH, JUNE

        - Following advices of guys for dostips.org, changed the delimiters 
          and the way quotes are handled:

             - The available delimiters are the following (SPACE),;(TAB). This 
               is now fully compatible with CMD.EXE. I also introduced 
               functions in order no to take care of some of them (,;) since 
               they may be used by some programs for switches. (The first 
               example I have is GCC, and options like:)

                  gcc -Wl,import

             - Changed the way quotes are handled. Quotes have now precedence 
               over conditionnal operators (|&) and command blocks (()). This 
               enables to make statements more secure using quotes. The new 
               behaviour also conforms to cmd.exe behavior. Typically, the 
               following code :

                  IF foo==foo echo  ") else ("

               was understood differently by DOS9 and CMD.EXE. Now, the ") 
               ELSE (" is considered to be escaped, and is no more interpreted 
               as a subcommand of IF, as it did before.

             - Choosed a standard way to handle quotation marks, an to cut 
               parameter. In fact, any delimiter that is between two quotation 
               marks is ignored. So that parameters are cut on unquoted 
               delimiters, some example of now valid parameters are :

                  "simple quotation"
                  foo="foo bar"

               and so on and so forth...

               If the interpreter finds an unpaired quotation mark, then, the 
               remaining characters are considered to be between quotation 
               marks. So that, the following examples are equivalent:

                  type "some file
                  type "some file"

             - behaviour of function to remove quotation marks in parameters 
               have also changed in order to achieve more compatibility with 
               CMD.EXE. Basically, the algorithm that DOS9 follows when 
               removing parameters quotation marks is:

                  - If the parameter begin with a quotation mark, then remove 
                    it, otherwise, stop the algorithm at this step.

                  - If the parameter end by a quotation mark, then remove it 
                    either. But, do not remove it if the parameter does not 
                    begin with a quotation mark.

        - Cancelled the conversion of DOS9 code to wide char. This was indeed 
          far too hard (it implied modifying allmost any piece of code), and 
          had little advantages (huge incompatibilities between various 
          platform, particularly for non-c99 function that are obviously 
          required in order to make thing working). Thus, I decided to make a 
          wrapper over libC functions in order to be able to use utf-8 
          internally. This way, I keep the code like it is, and preserve 
          compatibility with other platforms (Windows, Linux, NetBSD, 
          DragonFly BSD, OpenBSD) and with POSIX. Moreover, this support for 
          unicode may easily be remooved for platforms that do not handle 
          utf-8, or those that do it natively.

MONDAY 16TH, JUNE

        - Reorganized the source tree for internal commands. Before that, 
          every file of the COMMAND subdirectory contained several different 
          commands. I found that is was not really practical for maintaining 
          code, the code is now splitted in files that contains each a 
          different internal command.

        - Added a functionnal /Q switch to the RMDIR command. However, it is 
          supposed to deal with the /S switch, which is not functional yet.

